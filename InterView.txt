Integer 的自动拆箱在[-128,127]是不会new新的对象的，直接引用常量池的对象

==比较的是引用

String str = new String(“hello”);
 名 称		 特 点					对 象						example
栈(stack)	最快但是也很小			基本数据类型的变量，对象的引用，函数调用的现场保存	str
堆(heap)	大量的对象都是放在堆空间	new 关键字和构造器创建的对象				new 创建出来的字符串
静态存储区					字面量（literal）如直接书写的 100、“hello”和常量	"hello"

构造器不能被继承，不能被重写，但可以被重载

重写（override）:两同两小一大原则
		方法名相同，参数相同
		子类返回类型小于等于父类返回类型
		子类抛出异常小于等于父类抛出异常
		子类访问权限大于等于父类访问权限
重载（Overload）：重载的两个方法名相同，但方法参数的个数不同

两个对象 hashCode相同，equals未必是true
	equals是true,hashCode一定相同

java编程语言只有值传递参数

String						StringBuffer				StringBuilder
引用的字符串是不可以更改的			表示的字符串对象是可以直接进行修改的	表示的字符串对象是可以直接进行修改的
final修饰的，不可以被修改，继承，重写		被 synchronized 修饰,线程安全		在单线程环境下使用的

HashMap 底层实现原理是什么？
HashMap的线程是不安全的
存储结构有数组和链表
数组：存储区间是连续的，占用内存严重，故空间复杂的很大，但时间复杂度很小；寻址容易，插入和删除困难
链表：存储区间离散，占用内存比较宽松，故空间复杂度很小，但时间复杂度很大；寻址困难，插入和删除容易
HashMap的put方法的原理：先判断一下要存储内容的key值是否为null
			如果key为null，则执行putForNullKey方法，将内容存储到Entry[]数组的第一个位置
			如果key不为null，计算key的hash值，对数组长度取模，得到要存储位置的下标
					迭代该数组元素上的链表，看该链表上是否有hash值相同的
						如果有hash值相同的，就直接覆盖value的值
						如果没有hash值相同，就将该内容存储到链表的表头
			当HashMap中存储的内容超过数组长度 *loadFactor时，数组就会进行扩容，默认的数组长度是16，loadFactor为加载因子，默认的值为0.75
元素是按照什么样的规则存储到数组中？根据元素的key的哈希值对数组长度取模得到，hash(key.hashCode())%len
HashMap里面实现一个静态内部类Entry，其重要的属性有 hash，key，value，next。
hashcode相同，所以它们的bucket位置相同，‘碰撞’会发生。当两个 Entry 对象的 key 的 hashCode() 返回值相同时将由 key 通过 eqauls() 比较值决定是采用覆盖行为（返回 true），还是产生 Entry 链（返回 false）。
JDK1.7 HashMap采用位桶+链表实现，即使用链表处理冲突，同一hash值的链表都存储在一个链表里。但是当位于一个桶中的元素较多，即hash值相等的元素较多时，通过key值依次查找的效率较低
JDK1.8 HashMap采用位桶+链表+红黑树，当链表长度超过阈值（8）时，将链表转换为红黑树，这样大大减少了查找时间。
如果两个键的hashcode相同，你如何获取值对象？
	会使用键对象的hashcode找到bucket位置，然后获取值对象。如果有两个值对象储存在同一个bucket，将会遍历LinkedList直到找到值对象。
	找到bucket位置之后，会调用keys.equals()方法去找到LinkedList中正确的节点，最终找到要找的值对象。

HashMap和HashTable的区别？
	都是基于哈希表实现的；内部每个元素都是 key-value 键值对；都实现了 Map、Cloneable、Serializable 接口
	HashMap 继承了 AbstractMap 类，而 HashTable 继承了 Dictionary 类
	HashMap 允许空的 key 和 value 值，HashTable 不允许空的 key 和 value 值。
	HashMap 不是线程安全的，而 HashTable 本身就是线程安全的容器。
	HashMap 进行 put 或者 get 操作，可以达到常数时间的性能；而 HashTable 的 put 和 get 操作都是加了 synchronized 锁的，所以效率很差。
	HashTable 的初始长度是11，之后每次扩充容量变为之前的 2n+1（n为上一次的长度）;HashMap 的初始长度为16，之后每次扩充变为原来的两倍。如果给定了容量初始值，那么HashTable 会直接使用你给定的大小，而 HashMap 会将其扩充为2的幂次方大小。
HashMap和HashSet的区别
	HashSet 继承于 AbstractSet 接口，实现了 Set、Cloneable,、java.io.Serializable 接口
	HashSet 不允许集合中出现重复的值。HashSet 底层其实就是 HashMap

类加载器
	1.启动类加载器（Bootstrap Class-Loader），加载jre/lib包下的jar文件
	2.扩展类加载器（Extension or Ext Class-Loader），加载jre/lib/ext包下的jar文件
	3.应用类加载器（Application or App Clas-Loader），根据程序的类路径来加载java类
运行时数据区
	1.PC寄存器（PC Register）也叫程序计数器，作用：当前线程所执行的字节码的信号指示器。
	2.JVM 栈（Java Virtual Machine Stack），是线程私有的，每一个JVM线程都有自己的JVM栈，这个栈与线程同时创建，生命周期和线程相同。
	3.本地方法栈（Native Method Stack），JVM 可能会使用到传统的栈来支持 Native 方法（使用 Java 语言以外的其它语言［C语言］编写的方法）的执行。
	4.堆（Heap），堆是可供各条线程共享的运行时内存区域，也是供所有类实例和数据对象分配内存的区域。
	5.方法区（Method area），在 JVM 中，被加载类型的信息都保存在方法区中。包括类型信息和方法列表。方法区是线程共享的，所以访问方法区信息的方法必须是线程安全的
	6.运行时常量池（Runtime Constant Pool），是每一个接口或者类的常量池在运行时的表现形式，包括编译器可知的数值字面量以及运行期解析后才能获得的方法或字段的引用
	  简而言之，当一个方法或者变量被引用时，JVM 通过运行时常量区来查找方法或者变量在内存里的实际地址。
执行引擎
	1.解释器 读取字节码流，然后执行指令。因为它一条一条地解释和执行指令，所以它可以很快地解释字节码，但是执行起来会比较慢。
	2.即时（Just-In-Time，JIT）编译器 弥补解释器的缺点，首先按照解释执行的方式来执行
							    然后在合适的时候，即时编译器把整段字节码编译成本地代码
							    然后，执行引擎就没有必要再去解释执行方法了，它可以直接通过本地代码去执行。
							    执行本地代码比一条一条进行解释执行的速度快很多。

JDK=JRE+开发工具(javac和java)
JRE=JVM+组件

finally 通常与 try-catch 块一起使用，即使 try-catch 块引发了异常，finally 块中的代码也会被执行，用于释放 try 块中创建的资源。
finalize() 是 Object 类的一个特殊方法，当对象正在被垃圾回收时，垃圾收集器将会调用该方法。可以重写该方法用于释放系统资源。
static 块是由 Java ClassLoader 将类加载到内存中时执行的代码块。通常用于初始化类的静态变量或者创建静态资源。

四种常见的系统架构
	1.单体架构
	2.分布式应用
	3.微服务架构
	4.Serverless架构

SQL的优化及进阶
	1.关键字大写，表名列名小写
	2.巧用 CASE WHEN 进行统计（统计湖南和海南的人员数）
		SELECT CASE pref_name
			WHEN '长沙' THEN '湖南' 
			WHEN '衡阳' THEN '湖南'
		        WHEN '海口' THEN '海南' 
			WHEN '三亚' THEN '海南'
			ELSE '其他' END AS cityName,
			SUM(population) 
			FROM PopTbl
			GROUP BY cityName;

			UPDATE city_population
			SET POPULATION = CASE
			WHEN POPULATION >= 100 THEN
				POPULATION * 0.9
			WHEN POPULATION < 100 THEN
				POPULATION * 1.2
			ELSE
				POPULATION
			END;
	3.参数是子查询时，使用 EXISTS 代替 IN(exists 可以`用到索引;只要查到一行数据满足条件就会终止查询)
		如果 IN 后面如果跟着的是子查询，由于 SQL 会先执行 IN 后面的子查询，会将子查询的结果保存在
		一张临时的工作表里（内联视图），然后扫描整个视图，显然扫描整个视图这个工作很多时候是非常耗时的，
		而用 EXISTS 不会生成临时表。
	4.避免排序
		1)使用 EXISTS 代表 DISTINCT
		2)使用集合运算符的 ALL 可选项
	5.使用 MAX/ MIN 都会对进行排序，如果参数字段上没加索引会导致全表扫描，如果建有索引，则只需要扫描索引即可
	6.能写在 WHERE 子句里的条件不要写在 HAVING 子句里(先GROUP BY再 HAVING；先WHERE 再GROUP BY )
		使用 GROUP BY 子句进行聚合时会进行排序，如果事先通过 WHERE 子句能筛选出一部分行，能减轻排序的负担
	7.在 GROUP BY 子句和 ORDER BY 子句中使用索引
		GROUP BY 子句和 ORDER BY 子句一般都会进行排序，如果指定带有索引的列作为这两者的参数列，由于用到了索引，可以实现高速查询，由于索引是有序的，排序本身都会被省略掉
	8.使用索引时，条件表达式的左侧应该是原始字段
	9.尽量避免使用否定形式
		会导致全表扫描
	10.进行默认的类型转换
		

	


